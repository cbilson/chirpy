//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.488
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Zippy.Chirp.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Zippy.Chirp.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /*jslint onevar: false, plusplus: false */
        ////*
        ///
        ///JS Beautifier
        ///---------------
        ///
        ///
        ///Written by Einar Lielmanis, &lt;einar@jsbeautifier.org&gt;
        ///http://jsbeautifier.org/
        ///
        ///Originally converted to javascript by Vital, &lt;vital76@gmail.com&gt;
        ///
        ///You are free to use this in any way you want, in case you find this useful or working for you.
        ///
        ///Usage:
        ///js_beautify(js_source_text);
        ///js_beautify(js_source_text, options);
        ///
        ///The options are:
        ///indent_size (default 4)          â€” indentation size,
        ///indent_char (default spac [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string beautify {
            get {
                return ResourceManager.GetString("beautify", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to var document = {
        ///    byid: {},
        ///    nodeType: 9,
        ///    getElementById: function(id){ return this.byid[id]; },
        ///    getElementsByTagName: function(name){
        ///      return this.body.getElementsByTagName(name);
        ///    },
        ///    addEventListener: function(){ },
        ///    removeEventListener: function(){ },
        ///    createElement: function(tag){
        ///      return new fragment(tag);
        ///    },
        ///    createComment: function(){ return {} }    
        ///  },
        ///  window = this,
        ///  navigator = { userAgent: &apos;Mozilla/5.0&apos;};
        ///
        ///function fragment (nodeNa [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string browser {
            get {
                return ResourceManager.GetString("browser", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /**
        ///* CoffeeScript Compiler v1.1.3
        ///* http://coffeescript.org
        ///*
        ///* Copyright 2011, Jeremy Ashkenas
        ///* Released under the MIT License
        ///*/
        ///this.CoffeeScript = function () { function require(a) { return require[a] } require[&quot;./helpers&quot;] = new function () { var a = this; (function () { var b, c; a.starts = function (a, b, c) { return b === a.substr(c, b.length) }, a.ends = function (a, b, c) { var d; d = b.length; return b === a.substr(a.length - d - (c || 0), d) }, a.compact = function (a) { var b, c, d, e; e = [ [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string coffee_script {
            get {
                return ResourceManager.GetString("coffee_script", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /*! 
        ///CSSLint
        ///Copyright (c) 2011 Nicole Sullivan and Nicholas C. Zakas. All rights reserved.
        ///
        ///Permission is hereby granted, free of charge, to any person obtaining a copy
        ///of this software and associated documentation files (the &quot;Software&quot;), to deal
        ///in the Software without restriction, including without limitation the rights
        ///to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        ///copies of the Software, and to permit persons to whom the Software is
        ///furnished to do so, subject to the [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string csslint {
            get {
                return ResourceManager.GetString("csslint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to var window = {},sys = {
        ///    debug: function () { }
        ///}, process = {
        ///    argv: [],
        ///    exit: function () { }
        ///},
        ///require = (function () {
        ///    var exported = {};
        ///    var files = {};
        ///
        ///    return function (file) {
        ///        file = getFullFilename(file);
        ///        var key = file.toLowerCase();
        ///
        ///        if (files[key]) {
        ///            return exported[key];
        ///        }
        ///
        ///        var js = getContents(file);
        ///        exported[key] = {}
        ///        files[key] = true;
        ///        (new Function(&apos;var exports = arguments [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string env {
            get {
                return ResourceManager.GetString("env", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ////*
        ///* JSHint, by JSHint Community.
        ///*
        ///* Licensed under the same slightly modified MIT license that JSLint is.
        ///* It stops evil-doers everywhere.
        ///*
        ///* JSHint is a derivative work of JSLint:
        ///*
        ///*   Copyright (c) 2002 Douglas Crockford  (www.JSLint.com)
        ///*
        ///*   Permission is hereby granted, free of charge, to any person obtaining
        ///*   a copy of this software and associated documentation files (the &quot;Software&quot;),
        ///*   to deal in the Software without restriction, including without limitation
        ///*   the rights t [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string jshint {
            get {
                return ResourceManager.GetString("jshint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /***********************************************************************
        ///
        ///A JavaScript tokenizer / parser / beautifier / compressor.
        ///
        ///This version is suitable for Node.js.  With minimal changes (the
        ///exports stuff) it should work on any JS platform.
        ///
        ///This file contains the tokenizer/parser.  It is a port to JavaScript
        ///of parse-js [1], a JavaScript parser library written in Common Lisp
        ///by Marijn Haverbeke.  Thank you Marijn!
        ///
        ///[1] http://marijn.haverbeke.nl/parse-js/
        ///
        ///Exported functions:
        ///
        ///- toke [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string parse_js {
            get {
                return ResourceManager.GetString("parse_js", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /***********************************************************************
        ///
        ///  A JavaScript tokenizer / parser / beautifier / compressor.
        ///
        ///  This version is suitable for Node.js.  With minimal changes (the
        ///  exports stuff) it should work on any JS platform.
        ///
        ///  This file implements some AST processors.  They work on data built
        ///  by parse-js.
        ///
        ///  Exported functions:
        ///
        ///    - ast_mangle(ast, options) -- mangles the variable/function names
        ///      in the AST.  Returns an AST.
        ///
        ///    - ast_squeeze(ast) -- e [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string process {
            get {
                return ResourceManager.GetString("process", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to var jsp = require(&quot;./parse-js&quot;),
        ///    pro = require(&quot;./process&quot;),
        ///    slice = jsp.slice,
        ///    member = jsp.member,
        ///    curry = jsp.curry,
        ///    MAP = pro.MAP,
        ///    PRECEDENCE = jsp.PRECEDENCE,
        ///    OPERATORS = jsp.OPERATORS;
        ///
        ///function ast_squeeze_more(ast) {
        ///    var w = pro.ast_walker(), walk = w.walk, scope;
        ///    function with_scope(s, cont) {
        ///        var save = scope, ret;
        ///        scope = s;
        ///        ret = cont();
        ///        scope = save;
        ///        return ret;
        ///    };
        ///    function _lambda(name, args,  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string squeeze_more {
            get {
                return ResourceManager.GetString("squeeze_more", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to //convienence function(src, [options]);
        ///function uglify(orig_code, options) {
        ///    options || (options = {});
        ///    var jsp = uglify.parser;
        ///    var pro = uglify.uglify;
        ///
        ///    var ast = jsp.parse(orig_code, options.strict_semicolons); // parse code and get the initial AST
        ///    ast = pro.ast_mangle(ast, options.mangle_options); // get a new AST with mangled names
        ///    ast = pro.ast_squeeze(ast, options.squeeze_options); // get an AST with compression optimizations
        ///    var final_code = pro.gen_code(ast, op [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string uglify_js {
            get {
                return ResourceManager.GetString("uglify_js", resourceCulture);
            }
        }
    }
}
